/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias libs.plugins.org.springframework.boot
    alias libs.plugins.io.spring.dependency.management
    id 'application'
    id 'jacoco'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}
apply from: '../gradle/common.gradle'
apply from: '../gradle/docker.gradle'


repositories {
    mavenCentral()
    mavenLocal()
}


application {
    mainClassName = 'hu.perit.template.authservice.AuthServiceApplication'
    // Some JVM options already set in common.gradle
    applicationDefaultJvmArgs += ['-Xmx512m', '-Xms32m']
}


dependencies {
    //implementation platform(libs.spvitamin)
    implementation platform(libs.spring.cloud)

    implementation project(':spvitamin-core')
    implementation project(':spvitamin-spring-admin')
    implementation project(':spvitamin-spring-cloud-client')
    implementation project(':spvitamin-spring-cloud-feign')
    implementation project(':spvitamin-spring-general')
    implementation project(':spvitamin-spring-logging')
    implementation project(':spvitamin-spring-security')
    implementation project(':spvitamin-spring-security-ldap')
    implementation project(':spvitamin-spring-server')
    implementation project(':spvitamin-spring-data')
    implementation project(':template-auth-service-api')

//    implementation 'hu.perit.spvitamin:spvitamin-core'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-admin'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-cloud-client'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-cloud-feign'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-general'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-logging'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-security'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-security-ldap'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-server'
//    implementation 'hu.perit.spvitamin:spvitamin-spring-data'

    // Lombok
    compileOnly libs.lombok
    testCompileOnly libs.lombok
    integtestCompileOnly libs.lombok
    annotationProcessor libs.lombok
    testAnnotationProcessor libs.lombok
    integtestAnnotationProcessor libs.lombok

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.retry:spring-retry'

    // Micrometer tracing
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    // JJWT
    implementation libs.bundles.jsonwebtoken

    // Validation
    implementation libs.hibernate.validator

    // Swagger
    implementation libs.openapi.ui
    implementation libs.openapi.api

    // apache.commons
    implementation libs.commons.lang3
    implementation libs.commons.collections4

    // Liquibase
    implementation libs.liquibase.core

    // ModelMapper TODO: mapstruct
    implementation 'org.modelmapper.extensions:modelmapper-spring:2.3.5'

    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // OpenCSV
    implementation libs.opencsv


    //------------------------------------------------------------------------------------------------------------------
    // Runtime dependencies
    //------------------------------------------------------------------------------------------------------------------
    // H2
    runtimeOnly 'com.h2database:h2'
    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // Logging in json format
    runtimeOnly libs.logstash.logback.encoder

    // Micrometer Prometheus plugin
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'


    //------------------------------------------------------------------------------------------------------------------
    // Test dependencies
    //------------------------------------------------------------------------------------------------------------------
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    integtestRuntimeOnly 'com.h2database:h2'
    integtestRuntimeOnly 'org.postgresql:postgresql'
}


test {
    useJUnitPlatform()
}


dockerImage() {
    dependsOn 'dockerBackendImage'
}

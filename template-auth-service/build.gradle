/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'application'
    id 'jacoco'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

ext {
    set('spvitaminVersion', '2.0.2-RELEASE')
    set('springCloudVersion', "2021.0.5")
    set('imagePrefix', 'wstemplate')
    set('dockerRegistry', 'docker-registry:5000')
}

sourceCompatibility = 11

apply from: '../gradle/common.gradle'
apply from: '../gradle/docker.gradle'


repositories {
    mavenCentral()
    mavenLocal()
}


application {
    mainClassName = 'hu.perit.template.authservice.Application'
    // Some JVM options already set in common.gradle
    applicationDefaultJvmArgs += ['-Xmx512m', '-Xms32m']
}


dependencies {
//    implementation project(':spvitamin-core')
//    implementation project(':spvitamin-spring-admin')
//    implementation project(':spvitamin-spring-cloud-client')
//    implementation project(':spvitamin-spring-cloud-feign')
//    implementation project(':spvitamin-spring-general')
//    implementation project(':spvitamin-spring-logging')
//    implementation project(':spvitamin-spring-security')
//    implementation project(':spvitamin-spring-security-ldap')
//    implementation project(':spvitamin-spring-server')
//    implementation project(':spvitamin-spring-data')
    implementation project(':template-auth-api')

    implementation 'hu.perit.spvitamin:spvitamin-core'
    implementation 'hu.perit.spvitamin:spvitamin-spring-admin'
    implementation 'hu.perit.spvitamin:spvitamin-spring-cloud-client'
    implementation 'hu.perit.spvitamin:spvitamin-spring-cloud-feign'
    implementation 'hu.perit.spvitamin:spvitamin-spring-general'
    implementation 'hu.perit.spvitamin:spvitamin-spring-logging'
    implementation 'hu.perit.spvitamin:spvitamin-spring-security'
    implementation 'hu.perit.spvitamin:spvitamin-spring-security-ldap'
    implementation 'hu.perit.spvitamin:spvitamin-spring-server'
    implementation 'hu.perit.spvitamin:spvitamin-spring-data'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    integtestCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    integtestAnnotationProcessor 'org.projectlombok:lombok'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // JJWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    // JAXB (JDK > 8 miatt)
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime'

    // javax.validation
    implementation group: 'javax.validation', name: 'validation-api'
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.5.Final'
    
    // Swagger
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation "io.springfox:springfox-swagger-ui:3.0.0"

    // apache.commons
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'

    // Slf4J
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // ModelMapper TODO: mapstruct
    implementation group: 'org.modelmapper.extensions', name: 'modelmapper-spring', version: '2.3.5'

    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation group: 'com.netflix.feign', name: 'feign-jackson', version: '8.18.0'

    // OpenCSV
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.0'

    // Micrometer Prometheus plugin
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.9.6'


    //------------------------------------------------------------------------------------------------------------------
    // Runtime dependencies
    //------------------------------------------------------------------------------------------------------------------
    // H2
    runtimeOnly 'com.h2database:h2'
    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'


    //------------------------------------------------------------------------------------------------------------------
    // Test dependencies
    //------------------------------------------------------------------------------------------------------------------
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.security:spring-security-test'

    testRuntime 'com.h2database:h2'
    testRuntime 'org.postgresql:postgresql'
}


dependencyManagement {
    imports {
        mavenBom "hu.perit.spvitamin:spvitamin-dependencies:${spvitaminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


test {
    useJUnitPlatform()
}


dockerImage() {
    dependsOn 'dockerBackendImage'
}

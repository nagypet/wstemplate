/*
 * Copyright 2020-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/********************************************************************************************************
 * Build a docker image based on the installation
 *******************************************************************************************************/
if (project.hasProperty('application')) {

    ext {
        if (project.hasProperty('imagePrefix')) {
            dockerImageName = "${imagePrefix}-" + applicationName.toLowerCase()
        } else {
            dockerImageName = applicationName.toLowerCase()
        }
        dockerBuildDir = new File(buildDir, 'docker').getAbsolutePath()
        dockerImageInputsChanged = false
    }

    tasks.register('dockerCopyDependencies', Copy) {
        dependsOn 'installDist'
        dependsOn 'finalizeInstallDist'

        from("$installDist.destinationDir/lib") {
            exclude jar.archiveFileName.get(), '*SNAPSHOT*'
        }
        into "$dockerBuildDir/dependencies"

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerCopySnapshotDependencies', Copy) {
        dependsOn 'installDist'
        dependsOn 'finalizeInstallDist'

        from("$installDist.destinationDir/lib") {
            exclude jar.archiveFileName.get()
            include '*SNAPSHOT*'
        }
        into "$dockerBuildDir/snapshot-dependencies"

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerCopyDockerfile', Copy) {
        dependsOn 'installDist'

        from 'docker'
        into dockerBuildDir

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerCopyBin', Copy) {
        dependsOn 'installDist'
        dependsOn 'finalizeInstallDist'

        from("$installDist.destinationDir/bin") {
            exclude '*.bat'
        }
        into "$dockerBuildDir/bin"

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerCopyConfig', Copy) {
        dependsOn 'installDist'
        dependsOn 'finalizeInstallDist'

        into "$dockerBuildDir/bin"
        into("/config") {
            from "config"
        }
        into(".") {
            from "../deployment/common"
        }
        into(".") {
            from "../deployment/${project.name}"
        }

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerCopyApplication', Copy) {
        dependsOn 'installDist'
        dependsOn 'finalizeInstallDist'

        from("$installDist.destinationDir/lib") {
            include jar.archiveFileName.get()
        }
        into "$dockerBuildDir/application"

        doLast { dockerImageInputsChanged = true }
    }

    tasks.register('dockerBackendImage') {
        group 'docker'
        description 'Builds docker image based on the installation'

        dependsOn 'installDist'
        dependsOn 'dockerCopyDependencies'
        dependsOn 'dockerCopySnapshotDependencies'
        dependsOn 'dockerCopyDockerfile'
        dependsOn 'dockerCopyBin'
        dependsOn 'dockerCopyConfig'
        dependsOn 'dockerCopyApplication'

        doFirst {
            logger.quiet "Building docker image: ${dockerImageName}"
        }
        doLast {
            exec {
                workingDir dockerBuildDir
                commandLine 'docker', 'build', '-t', "${dockerImageName}", '.'
            }
            if (project.hasProperty('dockerRegistry')) {
                exec {
                    workingDir dockerBuildDir
                    commandLine 'docker', 'tag', "${dockerImageName}", "${dockerRegistry}/${dockerImageName}:${version}"
                }
                exec {
                    workingDir dockerBuildDir
                    commandLine 'docker', 'push', "${dockerRegistry}/${dockerImageName}:${version}"
                }
            }
        }

        outputs.upToDateWhen { !dockerImageInputsChanged }
    }
} else {
    tasks.register('dockerBuildBackend') {
    }
}


/********************************************************************************************************
 * Placeholder task
 *******************************************************************************************************/
tasks.register('dockerImage') {
    group 'docker'
    description 'Builds docker image.'
}

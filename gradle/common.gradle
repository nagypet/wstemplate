/*
 * Copyright 2020-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.text.SimpleTemplateEngine

group = 'hu.perit'


tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    eachFile { println it.file }
}


//----------------------------------------------------------------------------------------------------------------------
// defaultTasks
//----------------------------------------------------------------------------------------------------------------------
defaultTasks 'dist'


if (!project.tasks.findByName('dist')) {
    tasks.register('dist') {
        group 'fmake'
    }
}


tasks.named('dist') {
    if (project.hasProperty('test')) {
        dependsOn 'test'
    }

    if (project.hasProperty('installBootDist')) {
        dependsOn 'installBootDist'
    } else if (project.hasProperty('shadowJar')) {
        dependsOn 'shadowJar'
        dependsOn 'installDist'
    } else if (project.hasProperty('installDist')) {
        dependsOn 'installDist'
    } else if (project.hasProperty('jar')) {
        dependsOn 'jar'
    }
}


//----------------------------------------------------------------------------------------------------------------------
// installDist
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('installDist')) {
    tasks.named('installDist') {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        finalizedBy 'finalizeInstallDist'
    }

    tasks.register('finalizeInstallDist', Copy) {
        group 'fmake'
        into "${buildDir}/install/${project.name}"
        // This will be copied by the distribution plugin
        /*
        into (".") {
            from "src/main/dist"
        }
        */
        into("bin/config") {
            from "config"
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// installBootDist
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('installBootDist')) {
    tasks.named('installBootDist') {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        finalizedBy 'finalizeInstallBootDist'
    }
    tasks.register('finalizeInstallBootDist', Copy) {
        group 'fmake'
        into "${buildDir}/install/${project.name}-boot"
        into(".") {
            from "src/main/dist"
        }
        into("bin/config") {
            from "config"
        }
        into("bin") {
            from "../deployment/${project.name}"
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// bootJar
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('bootJar')) {
    tasks.named('bootJar') {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}


//----------------------------------------------------------------------------------------------------------------------
// BuildTime
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('compileJava')) {
    task createBuildTimeTxt() {
        outputs.file("${buildDir}/buildtime.txt")
        doLast {
            new File(buildDir, "buildtime.txt").text = """Buildtime: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"""
        }
    }
    compileJava.finalizedBy createBuildTimeTxt

    compileJava {
        options.encoding = "UTF-8"
    }
}


//----------------------------------------------------------------------------------------------------------------------
// JDK > 1.8
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('java') && project.hasProperty('compileJava')) {
    sourceCompatibility = jvmVersion
    println "sourceCompatibility: " + sourceCompatibility
    if (jvmVersion != '1.8') {
        compileJava {
            options.compilerArgs << '--add-exports'
            options.compilerArgs << 'java.base/sun.security.ssl=ALL-UNNAMED'
        }
    }
}


task distWindowsService {
    group 'fmake'

    if (project.hasProperty('test')) {
        dependsOn 'test'
    }

    if (project.hasProperty('installBootDist')) {
        dependsOn 'installBootDist'
        dependsOn 'finalizeInstallBootDist'
        dependsOn 'updateServiceXml'
        //installBootDist.finalizedBy finalizeInstallBootDist
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Layered bootJar
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('bootJar')) {
    bootJar {
        layered {
            enabled = true
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Version information
//----------------------------------------------------------------------------------------------------------------------
if (new File("${projectDir}/version.ver").exists()) {
    version = rootProject.file("${projectDir}/version.ver").text.trim()
} else if (new File("${projectDir}/../version.ver").exists()) {
    version = rootProject.file("${projectDir}/../version.ver").text.trim()
} else {
    println "version.ver not found while processing ${project.name}!"
    version = 'dev'
    //throw new RuntimeException("version.ver not found while processing ${project.name}!")
}


//----------------------------------------------------------------------------------------------------------------------
// Test support
//----------------------------------------------------------------------------------------------------------------------
task prepareTest(type: Copy) {
    group 'fmake'
    from "src/main/dist/bin"
    into "${projectDir}/build/resources/test"
}

if (project.hasProperty('test')) {
    test {
        dependsOn 'prepareTest'
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Integration test support
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('sourceSets')) {
    sourceSets {
        integtest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integtest/java')
            }
            resources.srcDir file('src/integtest/resources')
        }
    }
}

configurations {
    integtestCompile.extendsFrom testCompile
    integtestRuntime.extendsFrom testRuntime
    integtestImplementation.extendsFrom testImplementation
}

task prepareIntegTest(type: Copy) {
    group 'fmake'

    from "src/main/dist/bin"
    into "${projectDir}/build/resources/integtest"
}

task prepareIntegTestInEclipse(type: Copy) {
    group 'fmake'

    from "src/main/dist/bin"
    into "${projectDir}/bin/integtest"
}

task integtest(type: Test) {
    dependsOn 'prepareIntegTest'
    if (project.hasProperty('sourceSets')) {
        testClassesDirs = sourceSets.integtest.output.classesDirs
        classpath = sourceSets.integtest.runtimeClasspath
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('integtest') {
    useJUnitPlatform()
}

if (project.hasProperty('processIntegtestResources')) {
    processIntegtestResources {
        duplicatesStrategy = 'include'
    }
}


//----------------------------------------------------------------------------------------------------------------------
// MANIFEST
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('jar')) {
    tasks.named('jar') {
        dependsOn 'createBuildTimeTxt'
        enabled = true
        doFirst {
            manifest {
                attributes(
                        'Implementation-Vendor': project.group,
                        'Build-Time': new File("${buildDir}/buildtime.txt").text.replace('Buildtime: ', '').trim(),
                        'Implementation-Version': project.version
                )
                if (project.hasProperty('application')) {
                    attributes(
                            'Implementation-Title': applicationName,
                            'Implementation-Type': 'Application'
                    )
                }
            }
        }
    }
}

if (project.hasProperty('bootJar')) {
    tasks.named('bootJar') {
        dependsOn 'createBuildTimeTxt'
        doFirst {
            manifest {
                attributes(
                        'Implementation-Vendor': project.group,
                        'Build-Time': new File("${buildDir}/buildtime.txt").text.replace('Buildtime: ', '').trim(),
                        'Implementation-Version': version
                )
                if (project.hasProperty('application')) {
                    attributes(
                            'Implementation-Title': applicationName,
                            'Implementation-Type': 'Application'
                    )
                }
            }
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// updateServiceXml
//----------------------------------------------------------------------------------------------------------------------
if (project.tasks.findByName('installBootDist')) {
    tasks.register('updateServiceXml') {
        group 'fmake'
        description 'Update service xml'

        dependsOn 'installBootDist'

        def serviceFile = new File("${buildDir}/install/${project.name}-boot/bin/${project.name}.xml")
        def serviceFileName = serviceFile.toString()

        doFirst {
            if (serviceFile.exists()) {
                println("> Updating ${serviceFileName} with jarname: ${project.name}-${version}.jar")

                def binding = [
                        JARNAME_PLACEHOLDER: "${project.name}-${version}.jar"
                ]

                def engine = new SimpleTemplateEngine()
                def template = engine.createTemplate(serviceFile.text).make(binding)

                serviceFile.write template.toString()
            } else {
                println("> ${serviceFileName} not found!")
            }
        }

        outputs.upToDateWhen {
            // Ha nem létezik, akkor up-to-date a task
            !(new File(serviceFileName).exists())
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Application
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('application')) {
    application {
        if (applicationDefaultJvmArgs.isEmpty()) {
            applicationDefaultJvmArgs = ['-XX:+UseG1GC', '-Djava.net.preferIPv4Stack=true', '-Duser.country=US', '-Duser.language=en', '-Dorg.freemarker.loggerLibrary=none', '-Dfile.encoding=utf-8']
        }
    }
}


task configurations() {
    group 'fmake'
    description 'Prints the configuration items'
    doLast {
        configurations.each { println it.name }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Start scripts
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('startScripts')) {
    startScripts {
        doLast {
            windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*')
            unixScript.text = unixScript.text.replaceAll('CLASSPATH=.*', 'CLASSPATH=\\$APP_HOME/lib/*')
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// IntelliJ IDEA
//----------------------------------------------------------------------------------------------------------------------
task prepareRunInIDEA(type: Copy) {
    group 'fmake'
    into "${projectDir}/out/production/resources"
    from "src/main/dist/bin"
    from "config"
    from "../deployment/${project.name}"
}

task prepareRunInIDEA2021(type: Copy) {
    group 'fmake'
    into "${projectDir}/build/resources/main"
    from "src/main/dist/bin"
    from "config"
    from "../deployment/${project.name}"
}


//----------------------------------------------------------------------------------------------------------------------
// Eclipse
//----------------------------------------------------------------------------------------------------------------------
task prepareRunInEclipse(type: Copy) {
    group 'fmake'
    into "${projectDir}/bin/main"
    from "src/main/dist/bin"
    from "config"
    from "../deployment/${project.name}"
}


//----------------------------------------------------------------------------------------------------------------------
// RUN
//----------------------------------------------------------------------------------------------------------------------
task prepareRun(type: Copy) {
    group 'fmake'
    into "${projectDir}/build"
    into("bin") {
        from "src/main/dist/bin"
    }
    into("bin/config") {
        from "config"
    }
    into("bin") {
        from "../deployment/${project.name}"
    }
}

if (project.hasProperty('run')) {
    run {
        dependsOn prepareRun
//        doFirst {
//            applicationDefaultJvmArgs += ['-Dspring.profiles.active=default,dev']
//        }
        workingDir = "${projectDir}/build/bin"
    }
}

if (project.hasProperty('bootRun')) {
    bootRun {
        dependsOn prepareRun
//        doFirst {
//            applicationDefaultJvmArgs += ['-Dspring.profiles.active=default,dev']
//        }
        workingDir = "${projectDir}/build/bin"
    }
}


if (project.hasProperty('jacocoTestReport')) {
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// Publishing with source and javadoc
//----------------------------------------------------------------------------------------------------------------------
if (project.hasProperty('java')) {
    java {
        withSourcesJar()
    }
    java {
        withJavadocJar()
    }
    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
}


pluginManager.withPlugin('maven-publish') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = "${project.group}"
                artifactId = "${project.name}"
                version = "${version}"
                from components.java
                pom {
                    name = "${project.group}:${project.name}"
                    description = 'MicroDMS project'
                    developers {
                        developer {
                            id = 'nagypet'
                            name = 'Peter Nagy'
                            email = 'peter.nagy@perit.hu'
                        }
                    }
                }
            }
        }
    }
}


tasks.named("jar") {
    archiveClassifier = ''
}
